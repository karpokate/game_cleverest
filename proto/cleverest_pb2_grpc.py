# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import cleverest_pb2 as cleverest__pb2


class CleverestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllQuestions = channel.unary_unary(
                '/cleverest.Cleverest/GetAllQuestions',
                request_serializer=cleverest__pb2.LoadQuestionsList.SerializeToString,
                response_deserializer=cleverest__pb2.ReturnQuestionsList.FromString,
                )
        self.AskQuestion = channel.unary_unary(
                '/cleverest.Cleverest/AskQuestion',
                request_serializer=cleverest__pb2.QuestionRequest.SerializeToString,
                response_deserializer=cleverest__pb2.QuestionResponse.FromString,
                )
        self.CheckUserAnswer = channel.unary_unary(
                '/cleverest.Cleverest/CheckUserAnswer',
                request_serializer=cleverest__pb2.SendUserAnswers.SerializeToString,
                response_deserializer=cleverest__pb2.UserResults.FromString,
                )
        self.CheckUserRanking = channel.unary_unary(
                '/cleverest.Cleverest/CheckUserRanking',
                request_serializer=cleverest__pb2.LoadUserRanking.SerializeToString,
                response_deserializer=cleverest__pb2.ReturnUserRanking.FromString,
                )


class CleverestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserRanking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CleverestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllQuestions,
                    request_deserializer=cleverest__pb2.LoadQuestionsList.FromString,
                    response_serializer=cleverest__pb2.ReturnQuestionsList.SerializeToString,
            ),
            'AskQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.AskQuestion,
                    request_deserializer=cleverest__pb2.QuestionRequest.FromString,
                    response_serializer=cleverest__pb2.QuestionResponse.SerializeToString,
            ),
            'CheckUserAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserAnswer,
                    request_deserializer=cleverest__pb2.SendUserAnswers.FromString,
                    response_serializer=cleverest__pb2.UserResults.SerializeToString,
            ),
            'CheckUserRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserRanking,
                    request_deserializer=cleverest__pb2.LoadUserRanking.FromString,
                    response_serializer=cleverest__pb2.ReturnUserRanking.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cleverest.Cleverest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cleverest(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cleverest.Cleverest/GetAllQuestions',
            cleverest__pb2.LoadQuestionsList.SerializeToString,
            cleverest__pb2.ReturnQuestionsList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cleverest.Cleverest/AskQuestion',
            cleverest__pb2.QuestionRequest.SerializeToString,
            cleverest__pb2.QuestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUserAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cleverest.Cleverest/CheckUserAnswer',
            cleverest__pb2.SendUserAnswers.SerializeToString,
            cleverest__pb2.UserResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUserRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cleverest.Cleverest/CheckUserRanking',
            cleverest__pb2.LoadUserRanking.SerializeToString,
            cleverest__pb2.ReturnUserRanking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
